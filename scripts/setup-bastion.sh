#!/bin/bash

# Setup script to deploy MCP server to bastion host
# Run this once to prepare the bastion host
# Supports both SSH key (preferred) and password authentication
#
# Generated by Cursor - AI-powered code editor
# https://cursor.sh

set -e

# Configuration
BASTION_HOST="${MCP_BASTION_HOST:-bastion.example.com}"
BASTION_USER="${MCP_BASTION_USER:-admin}"
BASTION_PASSWORD="${MCP_BASTION_PASSWORD:-}"
REMOTE_PATH="${MCP_REMOTE_PATH:-/opt/openshift-mcp-server}"
SSH_KEY="${MCP_SSH_KEY:-~/.ssh/id_rsa}"
REMOTE_KUBECONFIG="${MCP_REMOTE_KUBECONFIG:-~/.kube/config}"

log() {
    echo -e "\033[0;32m[SETUP]\033[0m $1"
}

error() {
    echo -e "\033[0;31m[ERROR]\033[0m $1"
}

warn() {
    echo -e "\033[1;33m[SETUP]\033[0m $1"
}

log "Setting up MCP server on bastion host: $BASTION_HOST"

# Determine authentication method and set commands
if [[ -n "$BASTION_PASSWORD" ]]; then
    log "Using password authentication"
    warn "SSH key authentication is recommended for better security"
    if ! command -v sshpass >/dev/null 2>&1; then
        error "sshpass is required for password authentication"
        error "Install with: sudo apt-get install sshpass (Ubuntu/Debian) or brew install sshpass (macOS)"
        exit 1
    fi
    SSH_CMD="sshpass -p '$BASTION_PASSWORD' ssh -o StrictHostKeyChecking=no"
    RSYNC_CMD="rsync -avz -e 'sshpass -p \"$BASTION_PASSWORD\" ssh -o StrictHostKeyChecking=no'"
else
    log "Using SSH key authentication (recommended)"
    
    # Check if SSH key exists
    if [[ ! -f "$SSH_KEY" ]]; then
        error "SSH key not found: $SSH_KEY"
        error "Please ensure your SSH key is properly configured"
        error "Set MCP_SSH_KEY environment variable or provide MCP_BASTION_PASSWORD"
        exit 1
    fi
    
    SSH_CMD="ssh -i '$SSH_KEY' -o StrictHostKeyChecking=no -q"
    RSYNC_CMD="rsync -avz -e \"ssh -i '$SSH_KEY' -o StrictHostKeyChecking=no -q\""
fi

# Test SSH connectivity
log "Testing SSH connectivity to bastion host..."
if [[ -n "$BASTION_PASSWORD" ]]; then
    # Test with password
    if ! sshpass -p "$BASTION_PASSWORD" ssh -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no "$BASTION_USER@$BASTION_HOST" "echo 'Connection successful'" >/dev/null 2>&1; then
        error "Cannot connect to bastion host: $BASTION_HOST"
        error "Please verify:"
        error "1. Password is correct"
        error "2. Network connectivity to bastion host"
        error "3. SSH password authentication is enabled on bastion host"
        exit 1
    fi
else
    # Test with SSH key
    if ! ssh -i "$SSH_KEY" -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no -q "$BASTION_USER@$BASTION_HOST" "echo 'Connection successful'" >/dev/null 2>&1; then
        error "Cannot connect to bastion host: $BASTION_HOST"
        error "Please ensure:"
        error "1. SSH key is properly configured: $SSH_KEY"
        error "2. Public key is added to bastion host authorized_keys"
        error "3. Network connectivity to bastion host"
        error "Alternative: Set MCP_BASTION_PASSWORD for password authentication"
        exit 1
    fi
fi

log "SSH connectivity verified successfully"

# Check and install Node.js on bastion host
log "Checking Node.js installation on bastion host..."
$SSH_CMD "$BASTION_USER@$BASTION_HOST" "
    if ! command -v node >/dev/null 2>&1; then
        echo 'Node.js not found. Installing Node.js 18.x...'
        
        # Detect OS and install Node.js accordingly
        if command -v dnf >/dev/null 2>&1; then
            # RHEL/Fedora/CentOS
            echo 'Installing on RHEL/Fedora/CentOS system...'
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo dnf install -y nodejs
        elif command -v yum >/dev/null 2>&1; then
            # Older RHEL/CentOS
            echo 'Installing on older RHEL/CentOS system...'
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo yum install -y nodejs
        elif command -v apt-get >/dev/null 2>&1; then
            # Ubuntu/Debian
            echo 'Installing on Ubuntu/Debian system...'
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
        else
            echo 'ERROR: Cannot determine package manager. Please install Node.js manually.'
            echo 'Required: Node.js 18.x or later with npm'
            exit 1
        fi
        
        echo 'Node.js installation completed.'
    else
        echo \"Node.js version: \$(node --version)\"
        echo \"npm version: \$(npm --version)\"
    fi
"

# Create remote directory
log "Creating remote directory: $REMOTE_PATH"
$SSH_CMD "$BASTION_USER@$BASTION_HOST" "
    sudo mkdir -p '$REMOTE_PATH' && \
    sudo chown \$(whoami):\$(whoami) '$REMOTE_PATH'
"

# Copy project files
log "Copying project files to bastion host..."
eval "$RSYNC_CMD \
    --exclude 'node_modules' \
    --exclude '.git' \
    --exclude 'dist' \
    --exclude '*.log' \
    --exclude '.cursor' \
    --exclude 'openshift-mcp-server' \
    ./ '$BASTION_USER@$BASTION_HOST:$REMOTE_PATH/'"

# Install dependencies on remote host
log "Installing Node.js dependencies on bastion host..."
$SSH_CMD "$BASTION_USER@$BASTION_HOST" "
    cd '$REMOTE_PATH' && \
    npm install --production
"

# Check if kubeconfig exists
log "Checking kubeconfig on bastion host: $REMOTE_KUBECONFIG"
$SSH_CMD "$BASTION_USER@$BASTION_HOST" "
    if [[ ! -f '$REMOTE_KUBECONFIG' ]]; then
        echo 'WARNING: $REMOTE_KUBECONFIG not found on bastion host'
        echo 'Please ensure kubeconfig is configured for OpenShift cluster access'
        if [[ '$REMOTE_KUBECONFIG' != '~/.kube/config' ]]; then
            echo 'Alternative: Check if ~/.kube/config exists instead'
            ls -la ~/.kube/config 2>/dev/null || echo 'Default kubeconfig also not found'
        fi
    else
        echo 'kubeconfig found - testing cluster connectivity...'
        export KUBECONFIG='$REMOTE_KUBECONFIG'
        kubectl cluster-info || echo 'Cluster connectivity test failed'
    fi
"

log "Bastion host setup completed!"
log ""
log "Next steps:"
log "1. Ensure kubeconfig is properly configured on bastion host"
log "2. Update your local Cursor configuration to use the remote wrapper"
log "3. Test the connection with: node scripts/simple-remote-launcher.js" 