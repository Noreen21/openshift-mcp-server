#!/bin/bash

# Remote MCP Server Wrapper Script
# This script allows running the MCP server on a bastion host
# while using AI IDE on your local machine
# Supports both SSH key (preferred) and password authentication
#
# Generated by Cursor - AI-powered code editor
# https://cursor.sh

set -e

# Configuration
BASTION_HOST="${MCP_BASTION_HOST:-bastion.company.com}"
BASTION_USER="${MCP_BASTION_USER:-admin}"
BASTION_PASSWORD="${MCP_BASTION_PASSWORD:-}"
REMOTE_PATH="${MCP_REMOTE_PATH:-/opt/openshift-mcp-server}"
SSH_KEY="${MCP_SSH_KEY:-~/.ssh/id_rsa}"
REMOTE_KUBECONFIG="${MCP_REMOTE_KUBECONFIG:-~/.kube/config}"
REMOTE_NODE_ENV="${MCP_REMOTE_NODE_ENV:-production}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[MCP-REMOTE]${NC} $1" >&2
}

warn() {
    echo -e "${YELLOW}[MCP-REMOTE]${NC} $1" >&2
}

error() {
    echo -e "${RED}[MCP-REMOTE]${NC} $1" >&2
}

# Determine authentication method
if [[ -n "$BASTION_PASSWORD" ]]; then
    # Password authentication
    log "Using password authentication for $BASTION_HOST"
    warn "SSH key authentication is recommended for better security"
    
    # Check if sshpass is available
    if ! command -v sshpass >/dev/null 2>&1; then
        error "sshpass is required for password authentication"
        error "Install with: sudo apt-get install sshpass (Ubuntu/Debian) or brew install sshpass (macOS)"
        exit 1
    fi
    
    SSH_CMD="sshpass -p '$BASTION_PASSWORD' ssh -o StrictHostKeyChecking=no"
    SCP_CMD="sshpass -p '$BASTION_PASSWORD' scp -o StrictHostKeyChecking=no"
    
    # Test connectivity with password
    log "Testing connectivity to $BASTION_HOST..."
    if ! sshpass -p "$BASTION_PASSWORD" ssh -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no "$BASTION_USER@$BASTION_HOST" "echo 'Connection successful'" >/dev/null 2>&1; then
        error "Cannot connect to bastion host: $BASTION_HOST"
        error "Please verify:"
        error "1. Password is correct"
        error "2. Network connectivity to bastion host"
        error "3. SSH password authentication is enabled on bastion host"
        exit 1
    fi
else
    # SSH key authentication (preferred)
    log "Using SSH key authentication for $BASTION_HOST"
    
    # Check if SSH key exists
    if [[ ! -f "$SSH_KEY" ]]; then
        error "SSH key not found: $SSH_KEY"
        error "Please ensure your SSH key is properly configured"
        error "Set MCP_SSH_KEY environment variable or provide MCP_BASTION_PASSWORD"
        exit 1
    fi
    
    SSH_CMD="ssh -i '$SSH_KEY' -o StrictHostKeyChecking=no"
    SCP_CMD="scp -i '$SSH_KEY' -o StrictHostKeyChecking=no"
    
    # Test connectivity with SSH key
    log "Testing connectivity to $BASTION_HOST..."
    if ! ssh -i "$SSH_KEY" -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no "$BASTION_USER@$BASTION_HOST" "echo 'Connection successful'" >/dev/null 2>&1; then
        error "Cannot connect to bastion host: $BASTION_HOST"
        error "Please ensure:"
        error "1. SSH key is properly configured: $SSH_KEY"
        error "2. Public key is added to bastion host authorized_keys"
        error "3. Network connectivity to bastion host"
        error "Alternative: Set MCP_BASTION_PASSWORD for password authentication"
        exit 1
    fi
fi

log "Connected to bastion host successfully"

# Setup remote environment and run MCP server
log "Starting remote MCP server on $BASTION_HOST:$REMOTE_PATH"
log "Using kubeconfig: $REMOTE_KUBECONFIG"
log "Node environment: $REMOTE_NODE_ENV"

# Build the SSH command based on authentication method
if [[ -n "$BASTION_PASSWORD" ]]; then
    # Password authentication
    SSH_EXEC_CMD="sshpass -p '$BASTION_PASSWORD' ssh -o StrictHostKeyChecking=no \
        -o ServerAliveInterval=60 \
        -o ServerAliveCountMax=3 \
        -o ExitOnForwardFailure=yes"
else
    # SSH key authentication
    SSH_EXEC_CMD="ssh -i '$SSH_KEY' \
        -o ServerAliveInterval=60 \
        -o ServerAliveCountMax=3 \
        -o ExitOnForwardFailure=yes \
        -o StrictHostKeyChecking=no"
fi

# SSH command that:
# 1. Changes to the remote directory
# 2. Sets up environment variables (including custom kubeconfig)
# 3. Runs the MCP server
# 4. Forwards stdio for MCP protocol
$SSH_EXEC_CMD "$BASTION_USER@$BASTION_HOST" \
    "cd '$REMOTE_PATH' && \
     export NODE_ENV='$REMOTE_NODE_ENV' && \
     export KUBECONFIG='$REMOTE_KUBECONFIG' && \
     export MCP_SERVER_MODE=remote && \
     export MCP_BASTION_HOST='$BASTION_HOST' && \
     exec node index.js" 